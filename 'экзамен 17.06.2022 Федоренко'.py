# 1. Напишите функцию, которая будет принимать номер кредитной карты и показывать
# только последние 4 цифры. Остальные цифры должны заменяться звездочками
# def card(num):
#     return "*" * len(num[:-4]) + num[-4:]
# num = input("Введите номер карты:")
# print(card(num))

# 2. Напишите функцию, которая проверяет: является ли слово палиндромом
# def polindrom(text):
#     text_new = "".join(text.split())
#     print(text_new)
#     if text_new[::1] == text_new[::-1]: #проверили буквы слева-направо и справа-налево
#         print("палиндром")
#     else:
#         print("не палиндром")
# polindrom("а роза упала на лапу азора")
word = input(":")
def func(word):
    return True if word == word[::-1] else False
print(func("assa"))




#3. Создайте класс Tomato
# 2. Создайте статическое свойство states, которое будет содержать все стадии
# созревания помидора
# 3. Создайте метод __init__(), внутри которого будут определены два динамических
# protected свойства: 1) _index - передается параметром и 2) _state - принимает первое
# значение из словаря states
# 4. Создайте метод grow(), который будет переводить томат на следующую стадию
# созревания
# 5. Создайте метод is_ripe(), который будет проверять, что томат созрел (достиг
# последней стадии созревания)
# Класс TomatoBush
# 1. Создайте класс TomatoBush
# 2. Определите метод __init__(), который будет принимать в качестве параметра
# количество томатов и на его основе будет создавать список объектов класса
# Tomato. Данный список будет храниться внутри динамического свойства tomatoes.
# 3. Создайте метод grow_all(), который будет переводить все объекты из списка
# томатов на следующий этап созревания
# 4. Создайте метод all_are_ripe(), который будет возвращать True, если все томаты из
# списка стали спелыми
# 5. Создайте метод give_away_all(), который будет чистить список томатов после
# сбора урожая
# Класс Gardener
# 1. Создайте класс Gardener
# 2. Создайте метод __init__(), внутри которого будут определены два динамических
# свойства: 1) name - передается параметром, является публичным и 2) _plant -
# принимает объект класса Tomato, является protected
# 3. Создайте метод work(), который заставляет садовника работать, что позволяет
# растению становиться более зрелым
# 4. Создайте метод harvest(), который проверяет, все ли плоды созрели. Если все -
# садовник собирает урожай. Если нет - метод печатает предупреждение.

# class Tomato:
#     states = {1 : "green", 2 : "yellow", 3 : "red"}
#
#     def __init__(self, _index, _state):
#         self._index = _index
#         self._state = self.states[1]
#     def grow(self):
#         if self._index < 3:
#             print(f"не созрел, стадия созревания - {self.states[self._index]}")
#             self._index+=1
#         # else:
#         #     self.is_ripe()
#     def is_ripe(self):
#         if self._index == 3:
#             print("созрел")
# t=Tomato(1, 1)
# t.grow()
# t.grow()
# t.is_ripe()
#
# class TomatoBush(Tomato):
#     def __init__(self, amount):
#         super().__init__()
#         self.amount = amount
#         self.tomatoes = self.t.Tomato
#     def grow_all(self):
